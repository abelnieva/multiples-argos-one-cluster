global:
  image:
    # -- If defined, a repository applied to all ArgoCD deployments
    # -- Overrides the global ArgoCD image tag whose default is the chart appVersion
    tag: "${image_tag}"

createClusterRoles: true
## Custom resource configuration
crds:
  # -- Install and upgrade CRDs
  install: false 
  # -- Keep CRDs on chart uninstall
  keep: true
  # -- Annotations to be added to all CRDs
  annotations: {}

controller:
  enableStatefulSet: true
  replicas: ${controller_replicas}
  extraArgs:
    - --application-namespaces 
    - "${argocd_apps_namespace}" 
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
  env:
    - name: ARGOCD_CONTROLLER_REPLICAS
      value: "${controller_replicas}"


  serviceAccount:
    # -- Create a service account for the application controller
    create: true
    # -- Service account name
    name: argocd-application-controller
    # -- Annotations applied to created service account
    annotations:
    # -- Labels applied to created service account
    labels: {}
    # -- Automount API credentials for the Service Account
    automountServiceAccountToken: true

redis-ha:
  enabled: true
 
repoServer:
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 5
  env:
    - name: "ARGOCD_EXEC_TIMEOUT"
      value: "270s"

  metrics:
    enabled: true
    serviceMonitor:
      enabled: true


configs:
  cm:
    resource.exclusions: |
      - apiGroups:
        - kyverno.io
        kinds:
        - AdmissionReport
        - BackgroundScanReport
        - ClusterAdmissionReport
        - ClusterBackgroundScanReport
        clusters:
        - '*'
  params:
    application.namespaces: ${argocd_apps_namespace}
    server.enable.gzip: true



server:
  rbacConfigCreate: false
  extraArgs:
    - --application-namespaces 
    - "${argocd_apps_namespace}" 
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 8
  serviceAccount:
    # -- Create a service account for the application controller
    create: true
    # -- Service account name
    name: "argocd-server"
    # -- Annotations applied to created service account

    # -- Labels applied to created service account
    labels: {}
    # -- Automount API credentials for the Service Account
    automountServiceAccountToken: true
  metrics:
    enabled: true 
    serviceMonitor:
      enabled: true
  config:
    url: https://${argo_url}
    timeout.reconciliation: 2m
    resource.customizations.ignoreDifferences.admissionregistration.k8s.io_MutatingWebhookConfiguration: |
      jqPathExpressions:
      - '.webhooks[]?.clientConfig.caBundle'

  extensions:
    # -- Enable support for Argo UI extensions
    enabled: true

    ## Argo UI extensions image
    image:
      # -- Repository to use for extensions image
      # -- Tag to use for extensions image
      tag: "v0.1.0"
      # -- Image pull policy for extensions
      imagePullPolicy: IfNotPresent

    # -- Resource limits and requests for the argocd-extensions container
    resources: 
      limits:
        cpu: 1000m
        memory: 50Mi
      requests:
        cpu: 200m
        memory: 20Mi
dex:

  metrics:
    enabled: true
    serviceMonitor:
      enabled: true

applicationSet:
  metrics:
    enabled: true
